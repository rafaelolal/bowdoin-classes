r_registers = "%rax %rcx %rdx %rbx %rsp %rbp %rsi %rdi".split()

mov_instructions = []

for source in r_registers:
    for destination in r_registers:
        mov_instructions.append(f"mov {source}, {destination}")

e_registers = "%eax %ecx %edx %ebx %esp %ebp %esi %edi".split()

for source in e_registers:
    for destination in e_registers:
        mov_instructions.append(f"mov {source}, {destination}")

# generated by objdumping all the assembly instructions above in order
mov_bytes = """48 89 c0
48 89 c1
48 89 c2
48 89 c3
48 89 c4
48 89 c5
48 89 c6
48 89 c7
48 89 c8
48 89 c9
48 89 ca
48 89 cb
48 89 cc
48 89 cd
48 89 ce
48 89 cf
48 89 d0
48 89 d1
48 89 d2
48 89 d3
48 89 d4
48 89 d5
48 89 d6
48 89 d7
48 89 d8
48 89 d9
48 89 da
48 89 db
48 89 dc
48 89 dd
48 89 de
48 89 df
48 89 e0
48 89 e1
48 89 e2
48 89 e3
48 89 e4
48 89 e5
48 89 e6
48 89 e7
48 89 e8
48 89 e9
48 89 ea
48 89 eb
48 89 ec
48 89 ed
48 89 ee
48 89 ef
48 89 f0
48 89 f1
48 89 f2
48 89 f3
48 89 f4
48 89 f5
48 89 f6
48 89 f7
48 89 f8
48 89 f9
48 89 fa
48 89 fb
48 89 fc
48 89 fd
48 89 fe
48 89 ff
89 c0
89 c1
89 c2
89 c3
89 c4
89 c5
89 c6
89 c7
89 c8
89 c9
89 ca
89 cb
89 cc
89 cd
89 ce
89 cf
89 d0
89 d1
89 d2
89 d3
89 d4
89 d5
89 d6
89 d7
89 d8
89 d9
89 da
89 db
89 dc
89 dd
89 de
89 df
89 e0
89 e1
89 e2
89 e3
89 e4
89 e5
89 e6
89 e7
89 e8
89 e9
89 ea
89 eb
89 ec
89 ed
89 ee
89 ef
89 f0
89 f1
89 f2
89 f3
89 f4
89 f5
89 f6
89 f7
89 f8
89 f9
89 fa
89 fb
89 fc
89 fd
89 fe
89 ff"""

mov_instructions = dict(zip(mov_bytes.split("\n"), mov_instructions))

popq_instructions = {
    "58": "popq %rax",
    "59": "popq %rcx",
    "5a": "popq %rdx",
    "5b": "popq %rbx",
    "5c": "popq %rsp",
    "5d": "popq %rbp",
    "5e": "popq %rsi",
    "5f": "popq %rdi"
}

nop_instructions = {
    "20 c0": "andb %al, %al",
    "20 c9": "andb %cl, %cl",
    "20 d2": "andb %dl, %dl",
    "20 db": "andb %bl, %bl",
    "08 c0": "orb %al, %al",
    "08 c9": "orb %cl, %cl",
    "08 d2": "orb %dl, %dl",
    "08 db": "orb %bl, %bl",
    "38 c0": "cmpb %al, %al",
    "38 c9": "cmpb %cl, %cl",
    "38 d2": "cmpb %dl, %dl",
    "38 db": "cmpb %bl, %bl",
    "84 c0": "testb %al, %al",
    "84 c9": "testb %cl, %cl",
    "84 d2": "testb %dl, %dl",
    "84 db": "testb %bl, %bl"
}

all_instructions = {**mov_instructions, **
                    popq_instructions, **nop_instructions}

lines = []

with open('farm.d', 'r', encoding='utf-8') as f:
    for line in f:
        stripped_line = line.strip()
        split_line = stripped_line.split(":")

        if len(split_line) < 2:
            continue

        for key in all_instructions:
            if key in split_line[1]:
                lines.append((stripped_line, key))

max_line_length = max([len(line) for line, _ in lines])
max_bytes_length = max([len(key) for key in all_instructions])

for line, key in lines:
    print(
        f"{line}{' '*(max_line_length-len(line))} | {key}{' '*(max_bytes_length-len(key))} | {all_instructions[key]}")
